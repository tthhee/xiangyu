package fxy.oop.server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

public class Request {
	
	public static final String CRLF = "\r\n";
	//请求方式
	private String method;
	//请求资源
	private String url;
	//请求参数
	private Map<String, List<String>> parameterMapValues;
	
	private InputStream is;
	//请求信息
	private String RequestInfo;
	
	private Request()
	{
		method = "";
		url = "";
		parameterMapValues = new HashMap<String, List<String>>();
		RequestInfo = "";
	}
	public Request(InputStream is)
	{
		this();
		this.is = is;
		
		try {
			byte[] data = new byte[20480];
			int len;
			len = is.read(data);
			RequestInfo = new String(data, 0, len);
		} catch (IOException e) {
			return;
		}
		//分析请求信息
		parseRequestInfo();
	}
	/*
	 * ===================================
	 * 分析请求信息
	 * 
	 */
	public void parseRequestInfo()
	{
		if(null == RequestInfo || (RequestInfo.trim().equals("")))
		{
			return;
		}
		 /* ================================
		 * 从信息的首行分解出：请求方式， 请求路径， 请求参数（get可能存在）
		 * 如：GET /index.html?name=123&pwd=5456 HTTP/1.1
		 * =================================
		 */
		String parameter = "";
		String firstline = RequestInfo.substring(0, RequestInfo.indexOf(CRLF));
		int index = firstline.indexOf("/");
		this.method = firstline.substring(0, index).trim();
		String urlStr = firstline.substring(index, firstline.indexOf("HTTP/")).trim();
		if(this.method.equalsIgnoreCase("post"))
		{
			this.url = urlStr;
			parameter = RequestInfo.substring(RequestInfo.lastIndexOf(CRLF));
		}else if(this.method.equalsIgnoreCase("get"))
		{
			if(urlStr.contains("?"))
			{
				String[] urlArray = urlStr.split("\\?");
				this.url = urlArray[0];
				parameter = urlArray[1];
				
			}
			else
			{
				this.url = urlStr;
			}
		}
		
		if(parameter.equals(""))
		{
			return;
		}
		
		//将请求参数封装到Map中
	//	this.parameterMapValues
		parseParams(parameter);	
	}
	
	private void parseParams(String paramString)
	{
		StringTokenizer token = new StringTokenizer(paramString, "&");
		while(token.hasMoreTokens())
		{
			String keyValue = token.nextToken();
			String[] keyValues = keyValue.split("=");
			if(keyValues.length == 1)
			{
				keyValues = Arrays.copyOf(keyValues, 2);
				keyValues[1] = null;
			}
			String key = keyValues[0].trim();
			String value = null==keyValues[1]?null:decode(keyValues[1].trim(),"Unicode");
			if(!parameterMapValues.containsKey(key))
			{
				parameterMapValues.put(key, new ArrayList<String>());
			}
			List<String> values = parameterMapValues.get(key);
			values.add(value);
		}
	}
	
	private String decode(String value, String code)
	{
		try {
			return java.net.URLDecoder.decode(value, code);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	/*
	 * 根据页面的name获取对应的多个值
	 */
	public String[] getParameterValues(String name)
	{
		List<String> values = null;
		if((values = parameterMapValues.get(name))==null)
		{
			return null;
		}else
		{
			return values.toArray(new String[0]);
		}
	}
	
	/*
	 * 根据页面的name获取对应的1个值
	 */
	public String getParameter(String name)
	{
		String[] value = getParameterValues(name);
		if(null == value)
		{
			return null;
		}else
		{
			return value[0];
		}
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
}
